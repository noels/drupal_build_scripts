/**
set up a new project (set up repository, database, vhost)
manage developers that have access to the repository
backup and deploy project from developing server to staging server, or from staging to live
make backup & restore backup
*/

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

ext.propertyFiles = [
        "properties/secure/${ant.properties.env}.secure.properties",
        "properties/secure/secure.properties",
        "properties/${ant.properties.site}.properties",
        "properties/${ant.properties.env}.properties",
        "properties/build.properties",
        "properties/${ant.properties.site}.${ant.properties.env}.properties"
]
def env = System.getenv()
ant.properties.BUILD_NUMBER = env['BUILD_NUMBER']?:new Date().getTime()
ant.properties.workspace = env['WORKSPACE']?:'.'
apply from: "https://raw.github.com/noels/drupal_build_scripts/master/runCmd.gradle"
apply from: "https://raw.github.com/noels/drupal_build_scripts/master/drush.gradle"
apply from: "https://raw.github.com/noels/drupal_build_scripts/master/database.gradle"
apply from: "https://raw.github.com/noels/drupal_build_scripts/master/deploy.gradle"

ext.buildApplicationRoot = "${ant.properties.build}/${ant.properties."application.name"}/build_${ant.properties.BUILD_NUMBER}"

task init {
    inputs.files propertyFiles
    outputs.file ant.properties."drupal.filesTarget"
    doFirst{
        //create the files directory target as gradle can't handle dangling symlinks
        runCmd("mkdir -p ${ant.properties."drupal.filesTarget"}", new File(".") )
    }
}

task clean << {
    new File("remote.output").delete()
    runCmd("""/bin/rm -rf ${ant.properties.build}""", new File("."))
    runCmd("""/bin/rm -rf ${ant.properties.target}""", new File("."))
}

/* this is a customised copy task which is why there is a slightly different syntax for defining it.
	Note the missing <<.
*/
task copySrc(type: Copy, dependsOn: init) {
	from("${ant.properties.src}"){
		//exclude "sites/default"
		exclude ant.properties."site"
		exclude "sites/all/modules/dev"
		exclude "src/sites/all/data/"
		exclude ".git*"
	}
	into "${buildApplicationRoot}"
}

task generateSettings(type: Copy)  {
    inputs.files propertyFiles
    fileMode 0444
    dirMode 0555
    from("templates/") {
        include "${ant.properties.settingsTemplate}.skel"
    }
    into "${buildApplicationRoot}/sites/${ant.properties.site}"
    rename {name->"temp.settings.php"}
    filter(ReplaceTokens, tokens: ant.properties)
}

task generateSiteSettings(type: Copy)  {
    inputs.files propertyFiles
    fileMode 0444
    dirMode 0555
    from("templates/") {
        include "${ant.properties.site}.skel"
    }
    into "${buildApplicationRoot}/sites/${ant.properties.site}/"
    rename {name->"${ant.properties.site}.settings.php"}
    filter(ReplaceTokens, tokens: ant.properties)
}

task concatenateSettingsFiles(dependsOn: ["generateSettings", "generateSiteSettings"]) << {
    ant.concat(destfile:"${buildApplicationRoot}/sites/${ant.properties.site}/settings.php") {
        fileset(file: "${buildApplicationRoot}/sites/${ant.properties.site}/temp.settings.php")
        fileset(file: "${buildApplicationRoot}/sites/${ant.properties.site}/${ant.properties.site}.settings.php")
    }
    def settings = new File("${buildApplicationRoot}/sites/${ant.properties.site}/settings.php")

    // append config for any varnish servers
    def varnishServers = ant.properties."varnish.servers"
    if (varnishServers){
        settings.append("""
# Varnish configuration.
\$conf['cache'] = TRUE;
\$conf['cache_backends'] = array('sites/all/modules/contrib/varnish/varnish.cache.inc');
\$conf['cache_class_cache_page'] = 'VarnishCache';
\$conf['page_cache_invoke_hooks'] = FALSE;
\$conf['reverse_proxy'] = TRUE;
\$conf['reverse_proxy_addresses'] = array(${ant.properties."varnish.servers".split(',').collect{ "\"${it}\""}.join(", ")});
\$conf['varnish_control_terminal'] = "${varnishServers.split(',').collect{"${it}:6082"}.join(' ')}";
""")
    }

    // append config for any memcache servers
    def memcacheServers = ant.properties."memcache.servers"
    if (memcacheServers){
        settings.append("""
# Memcache configuration.
include_once('./includes/cache.inc');
include_once('./sites/all/modules/contrib/memcache/memcache.inc');
\$conf['cache_backends'][] = 'sites/all/modules/contrib/memcache/memcache.inc';
\$conf['cache_default_class'] = 'MemCacheDrupal';
\$conf['cache_class_form'] = 'DrupalDatabaseCache';
\$conf['memcache_key_prefix'] = '${ant.properties.env}-${ant.properties.site}-{ant.properties}';
\$conf['memcache_servers'] = array(${ant.properties."memcache.servers".split(',').collect{ "${it}"}.join(", ")});
""")
    }

    if (ant.properties."db.slave"){
        settings.append("""
\$databases['default']['slave'][] = array(
    'database' => '${ant.properties."db.name"}',
    'host' => '${ant.properties."db.slave"}',
    'username' => '${ ant.properties."db.slave.user" ?: ant.properties."db.user"}',
    'password' => '${ ant.properties."db.slave.pass" ?: ant.properties."db.pass"}',
    'port' => '',
    'driver' => 'mysql',
    'prefix' => '',
);
""")

    }
    // Find all properties of the form extra.* and puts them into the settings file
    def extraProperties = ant.properties.findAll{ entry ->entry.key =~ /^extra\./}
    if (extraProperties){
        settings.append( "\n### Custom properties of the form extra.<property> are added here #### \n\n")
    }
    extraProperties.each {
        if (it.value) {
           settings.append "\$conf[\"${it.key[6..-1]}\"] = ${it.value};\n"
        }
    }

    runCmd("/bin/rm -f ${buildApplicationRoot}/sites/${ant.properties.site}/temp.settings.php", new File("."))
    runCmd("/bin/rm -f ${buildApplicationRoot}/sites/${ant.properties.site}/${ant.properties.site}.settings.php", new File("."))
}

generateSettings.doFirst {
    runCmd("/bin/rm -f ${buildApplicationRoot}/sites/${ant.properties.site}/settings.php", new File("."))
}
task linkSiteFolder(dependsOn: "concatenateSettingsFiles") << {
    runCmd("/bin/ln -sfn ${ant.properties.site} ${ant.properties.fullUrl}", new File("${buildApplicationRoot}/sites"))
}

task generateVhost(type: Copy) {
    inputs.files propertyFiles
    fileMode 0444
    dirMode 0555
    from("templates/"){
        include "vhost.skel"
    }
    into "${ant.properties.target}/etc/"
    rename {name->"vhost-${ant.properties.site}.conf"}
    filter(ReplaceTokens, tokens: ant.properties)
}

generateVhost.doFirst {
    runCmd("/bin/rm -f target/etc/vhost-${ant.properties.site}.conf", new File("."))
}


task createFilesSymlinks(dependsOn: "linkSiteFolder") << {
    runCmd("/bin/ln -sfn ${ant.properties."drupal.filesTarget"} ${ant.properties."drupal.filesDir"}", new File(buildApplicationRoot))
}

ext.dbUrl = {
    "mysql://${ant.properties."db.adminuser"}:${ant.properties."db.adminpass"}@${ant.properties."db.host"}/${ant.properties."db.name"}"
}

task buildSite(dependsOn: ["copySrc", "linkSiteFolder", "generateVhost", "createFilesSymlinks"]) {

}


task packageSite(dependsOn: buildSite) {
    inputs.dir ant.properties.build
    outputs.file "${ant.properties.target}/${ant.properties."application.name"}.tar.gz"
    doFirst{
        runCmd("mkdir -p ${ant.properties.target}", new File(ant.properties.build))
        runCmd("tar czf  ${ant.properties.target}/${ant.properties."application.name"}.tar.gz .", new File(buildApplicationRoot))
    }
}

task correctOwnership() << {
    def servers = []
    servers << ant.properties."drush.host"
    ant.properties.webservers.split(",").each { servers << it   }
    servers.each{server ->
        runSshCmd("/usr/bin/sudo /bin/chown -R ${ant.properties."build.user"} ${ant.properties.deployFolder}", server)
    }
}

task deployDrupal(dependsOn: packageSite) << {
    def servers = []
    servers << ant.properties."drush.host"
    ant.properties.webservers.split(",").each { servers << it   }
    servers.each{server ->
        copyFilesToServer(server)
    }
    servers.each{server ->
        createReleaseSymlinks(server)
        restartApache(server)
    }
}

task installDrupal(dependsOn: deployDrupal) << {
    sql( sqlQuery: dropDatabaseSql)
    sql( sqlQuery: createDatabaseSql)
    ant.properties.webservers.split(',').each{ server ->
        sql( sqlQuery: grantPermissionsSql.replaceAll("@@HOST@@", server))
    }
    drush(
            drushCmd: "site-install ${ant.properties."drupal.profile"} " +
                    "--sites-subdir=${ant.properties."site"} " +
                    "--account-name=${ant.properties."drupal.adminuser"} " +
                    "--account-pass=${ant.properties."drupal.adminpass"} " +
                    "--site-mail='${ant.properties.mail}' " +
                    "--site-name='${ant.properties."site"}' --yes"
    )

    if (ant.properties."drupal.modules"){
        drush(
                drushCmd: "pm-enable ${ant.properties."drupal.modules".split(',').join(' ')}"
        )
    }
}

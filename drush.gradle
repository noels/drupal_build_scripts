repositories {
    mavenCentral()
}
configurations {
    antssh
}
dependencies {
    antssh group: 'org.apache.ant', name: 'ant-jsch', version: '1.7.0'
}
ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader


configurations.antssh.each { File f ->
    antClassLoader.addURL(f.toURI().toURL())
}

ext.drush = { Map args ->
    String drushCmd = args.drushCmd
    String siteUrl = args.siteUrl?:ant.properties."drush.url"
    String root = args.root?:ant.properties."drush.root"
    String host = args.host?:ant.properties."drush.host"
    String keyFile = args.keyFile?:ant.properties."build.userkey"
    String buildUser = args.buildUser?:ant.properties."build.user"
    String passphrase = args.passphrase?:ant.properties."build.userPassphrase"
    Boolean failOnError = args.failOnError?: true
    String extraDrushParams = args.extraDrushParams?:""
	def cmd = "${ant.properties["drush.executable"]} ${extraDrushParams} --uri=${siteUrl} --root=${root} --yes --verbose ${drushCmd}"
    new File(ant.properties.remoteOutputFile).append("\nRunning:: ${cmd}\nOn host ${host} As ${buildUser}\nOutput:\n")
	ant.sshexec(
    	username: buildUser,
    	host:host,
    	command: cmd,
    	failonerror:failOnError,
    	keyfile:keyFile,
        passphrase:passphrase,
        append: true,
        trust:true,
        outputproperty: "drushOutputBuffer",
        output:ant.properties.remoteOutputFile,
        verbose: 'true'
  	)
    if (ant.properties.drushOutputBuffer.contains("[error]")){
        throw new Exception("Drush command returned an error:\n${ant.properties.drushOutputBuffer}")
    }
}

ext.drushTasks = []
drush(drushCmd: "help --pipe 2> /dev/null")
ant.properties.drushOutputBuffer.split("\n").each{
    it.split(/\s/).each{ cmd ->
        drushTasks << cmd
    }
}

drushTasks.each{ command ->
    task "drush_$command" << {
        if (project.hasProperty('drushArgs'))
            command = "$command ${project.ext.drushArgs}"
        drush(
            drushCmd: "$command"
        )
    }
}